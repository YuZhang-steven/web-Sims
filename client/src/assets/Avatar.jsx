/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/AnimatedWoman.glb -o src/assets/AnimatedWoman.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, useGraph } from '@react-three/fiber'
import { SkeletonUtils } from "three-stdlib"
import { useAtom } from 'jotai'
import { userAtom } from '../components/SocketManager'
import { useGrid } from '../hook/useGrid'

/**
 * basic varible
 */
const MOVEMENT_SPEED = 0.032//character move speed

/**
 * 
 * @param {
 * hair color 
 * top color 
 * bottom color
 * } 
 * @returns 
 * An woman chracters
 */
export function Avatar({
  hairColor = "green",
  topColor = "pink",
  bottomColor = "brown",
  id,
  avatarUrl = "https://models.readyplayer.me/65f73e2e542d99479059fb94.glb",
  ...props
}) {

  //initial location
  const position = useMemo(() => props.position, [])
  // reference point
  const group = useRef()
  //get data from GLTF, notice we export scene not node
  console.log(avatarUrl);
  const { scene } = useGLTF(avatarUrl)

  const avatar = useRef()

  //load animation one by one
  const { animations: walkAnimation } = useGLTF("/animations/M_Walk_001.glb")
  const { animations: idleAnimation } = useGLTF("/animations/F_Standing_Idle_001.glb")

  //clone the skinnedmesh
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])

  const [path, setPath] = useState([])//moving poth store

  const { gridToVector3 } = useGrid()//grid coordinate convert method

  useEffect(() => {
    const path = []

    /**
     * when getting the path from the server, convert the grid position to the vector3 position
     * change the path state, rerender the component
     */
    props.path?.forEach((gridPosition) => {
      path.push(gridToVector3(gridPosition))
    });
    setPath(path)

  }, [props.path])

  //from useGraph to get final clone result
  const { nodes } = useGraph(clone)

  //get animation from the GLTf and then add them through reference
  const { actions } = useAnimations([walkAnimation[0], idleAnimation[0]], avatar)
  //switch from different animations
  const [animation, setAnimation] = useState("F_Standing_Idle_001")


  /**
   * Setting up the aimation with useEffect
   * 
   * The animation has to run from start to the end of component, the rerender not affect it
   * the only thing cause it update is the animation it self change. so we use useEffect to
   * achive it
   */
  useEffect(() => {
    actions[animation].reset().fadeIn(0.32).play();
    return () => actions[animation]?.fadeOut(0.32);
  }, [animation])


  const [user] = useAtom(userAtom)

  /**add  shadow to all mesh*/
  useEffect(() => {
    clone.traverse((child) => {
      //go all meshes, add shadow to them
      if (child.isMesh) {
        child.castShadow = true
        child.receiveShadow = true
      }
    })
  }, [])


  /**
   * state lisnener during each frame
   */
  useFrame((state) => {

    /**
     * moving animnation:
     * when anytime, path state has value, length more than 0, the animation start to working
     * the first position in the path arrat is same as current, so it will just be removed.
     * since the section one:
     * the animation reset,
     * recalculate the direction and position and gradually move.
     * 
     */
    const hips = avatar.current.getObjectByName("Hips")
    hips.position.set(0, hips.position.y, 0)
    if (path?.length && group.current.position.distanceTo(path[0]) > 0.1) {

      //direction is the step in each frame. the movement_speed determine the step size
      const direction = group.current.position
        .clone()
        .sub(path[0])
        .normalize()
        .multiplyScalar(MOVEMENT_SPEED)
      group.current.position.sub(direction)//change position to next position
      group.current.lookAt(path[0])// change looking direction
      setAnimation("M_Walk_001")
    }
    else if (path?.length) {
      path.shift()

    }
    else {
      setAnimation("F_Standing_Idle_001")
    }

    /**
     * camera follow the user moving
     */
    if (id === user) {
      state.camera.position.x = group.current.position.x + 8
      state.camera.position.y = group.current.position.y + 8
      state.camera.position.z = group.current.position.z + 8
      state.camera.lookAt(group.current.position)
    }

  })

  return (
    <group
      ref={group}
      {...props}
      position={position}
      dispose={null}
      name={`character-${id}`}
    >
      <primitive object={clone} ref={avatar} />
    </group>
  )
}

// useGLTF.preload('/models/AnimatedWoman.glb')
useGLTF.preload("/animations/M_Walk_001.glb")
useGLTF.preload("/animations/F_Standing_Idle_001.glb")

