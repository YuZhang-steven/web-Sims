/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useMemo, useContext, createContext, useState, useEffect } from "react";
import { useGLTF, Merged, useAnimations } from "@react-three/drei";

const modelContext = createContext()
const animationContext = createContext()



export function AnimatedWomanIns({ children, ...props }) {
    const { nodes, animations } = useGLTF('/models/AnimatedWoman.glb');
    const models = useMemo(
        () => ({
            CharacterArmature: nodes.Root,
            CasualBody: nodes.Casual_Body_1,
            CasualBody1: nodes.Casual_Body_2,
            CasualFeet: nodes.Casual_Feet_1,
            CasualFeet1: nodes.Casual_Feet_2,
            CasualHead: nodes.Casual_Head_1,
            CasualHead1: nodes.Casual_Head_2,
            CasualHead2: nodes.Casual_Head_3,
            CasualHead3: nodes.Casual_Head_4,
            CasualLegs: nodes.Casual_Legs,
        }),
        [nodes]
    );

    const savedAnimation = useMemo(() => ({
        animation: animations
    }),
        [animations]
    )
    return (
        <Merged meshes={models} {...props}>
            {(models) => (
                <modelContext.Provider value={models} children={children}>
                    <animationContext.Provider value={savedAnimation} children={children}>

                    </animationContext.Provider>
                </modelContext.Provider>
            )}
        </Merged>
    );
}

export function Model(props) {
    const instances = useContext(modelContext);
    const animations = useContext(animationContext);
    // console.log(animations);
    const group = useRef();
    const { actions } = useAnimations(animations.animation, group);

    const [currentAction, setcurrentAction] = useState("CharacterArmature|Idle")



    useEffect(() => {
        actions[currentAction].reset().fadeIn(0.5).play();
        return () => actions[currentAction].fadeOut(0.5);
    }, [currentAction])

    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Root_Scene">
                <group name="RootNode">
                    <group name="CharacterArmature" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <instances.CasualBody name="Casual_Body_1" />
                        <instances.CasualBody1 name="Casual_Body_2" />
                    </group>

                    {/* <group
                        name="CharacterArmature"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    >
                        <primitive object={nodes.Root} />
                    </group> */}
                    <group name="Casual_Body" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <instances.CasualBody name="Casual_Body_1" />
                        <instances.CasualBody1 name="Casual_Body_2" />
                    </group>
                    <group name="Casual_Feet" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <instances.CasualFeet name="Casual_Feet_1" />
                        <instances.CasualFeet1 name="Casual_Feet_2" />
                    </group>
                    <group name="Casual_Head" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                        <instances.CasualHead name="Casual_Head_1" />
                        <instances.CasualHead1 name="Casual_Head_2" />
                        <instances.CasualHead2 name="Casual_Head_3" />
                        <instances.CasualHead3 name="Casual_Head_4" />
                    </group>
                    <instances.CasualLegs
                        name="Casual_Legs"
                        rotation={[-Math.PI / 2, 0, 0]}
                        scale={100}
                    />
                </group>
            </group>
        </group>
    );
}

useGLTF.preload("/Animated Woman.glb");